CREATE DATABASE IF NOT EXISTS ShrineComics;

CREATE TABLE IF NOT EXISTS ShrineComics.user(
	user_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	username VARCHAR(512) NOT NULL UNIQUE,
	password VARCHAR(512) NOT NULL,
	email VARCHAR(512) NOT NULL UNIQUE,
	address TEXT,
	telephone VARCHAR(512) NULL,
	point INT NOT NULL UNIQUE,
	role ENUM("writer","reader")
);
CREATE TABLE IF NOT EXISTS ShrineComics.comic(
	comic_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	name VARCHAR(512) NOT NULL UNIQUE,
	page INT NULL,
	point_price INT NOT NULL UNIQUE,
	developer VARCHAR(512), FOREIGN KEY (developer) REFERENCES user(username) ON UPDATE CASCADE ON DELETE RESTRICT,
	release_date DATE NOT NULL,
	commen TEXT
);
CREATE TABLE IF NOT EXISTS ShrineComics.rent_comic(
	rent_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	user_id INT NOT NULL UNIQUE, FOREIGN KEY (user_id) REFERENCES user(user_id) ON UPDATE CASCADE ON DELETE RESTRICT,
	comic_id INT NOT NULL UNIQUE, FOREIGN KEY (comic_id) REFERENCES comic(comic_id) ON UPDATE CASCADE ON DELETE RESTRICT,
	rent_name VARCHAR(512) NOT NULL UNIQUE, FOREIGN KEY (rent_name) REFERENCES user(username) ON UPDATE CASCADE ON DELETE RESTRICT,
	rent_comic VARCHAR(512) NOT NULL UNIQUE, FOREIGN KEY (rent_comic) REFERENCES comic(name) ON UPDATE CASCADE ON DELETE RESTRICT,
	comic_price INT NOT NULL UNIQUE, FOREIGN KEY (comic_price) REFERENCES comic(point_price) ON UPDATE CASCADE ON DELETE RESTRICT
);
CREATE TABLE IF NOT EXISTS ShrineComics.feedback(
	feedback_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	email_sender VARCHAR(512) NOT NULL UNIQUE, FOREIGN KEY (email_sender) REFERENCES user(email) ON UPDATE CASCADE ON DELETE RESTRICT,
	user_sender VARCHAR(512) NOT NULL UNIQUE, FOREIGN KEY (user_sender) REFERENCES user(username) ON UPDATE CASCADE ON DELETE RESTRICT,
	feed_comment TEXT NULL
);

